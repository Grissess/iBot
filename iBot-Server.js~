var net = require('net');
var tls = require('tls');
var readline = require('readline');
var util=require('util');

var User = require('./iBot-User.js');
var Channel = require('./iBot-Channel.js');
var Command = require('./iBot-Command.js');

module.exports = function(context, host, port, nick, ident, pass, ssl, cmdprefixes)
{
	if(typeof ssl === 'undefined') {
		ssl = false;
	}
	if(typeof cmdprefixes === 'undefined') {
		cmdprefixes = ['!'];
	}
	this.host = host;
	this.port = port;
	this.nick = nick;
	this.ident = ident;
	this.pass = pass;
	this.ssl = ssl;
	this.cmdprefixes=cmdprefixes

	this.isupport = {};
	this.users = {};
	this.channels = {};
	
	this.modules = {};
	this.activeModuleStack = [];
	this.timeouts = {};
	this.commands={};

	this.user = new User(this, nick, ident, '', 'iBot');
	this.users[nick]=this.user;
	
	this.msgmaxsize=512;
	
	this.toString = function () {
		return '<Server '+this.host+':'+this.port+' as '+this.user.getMask()+'>';
	}
	
	this.authenticator={} //This object exists to be extended. Please ensure that you restore it on unload, however.
	this.authenticator.test = function (user, node, reply) {
		var rv=false;
		//Complies with .master server standard; make sure the .bind below is to the server, not the authenticator.
		if(typeof this.master !== 'undefined') {
			rv=this.master.test(user.getMask());
		}
		return rv;
	}.bind(this);
	
	this.authenticator.failMsg = function (perm) {
 		return 'Action failed; not holding permission for '+perm;
	}.bind(this);
	
	this.uniqueName = function () { //For indexing into other mappings
		if(typeof this.id !== 'undefined') {
			return this.id;
		}
		var s=this.host+this.port+this.nick+this.ident+this.ssl;
		if(this.client) { //FIXME: We can only ever guarantee *truly* unique naming (in a harsh environment) [cnt'd]
			s=s+this.client.remoteAddress+this.client.remotePort+this.client.localAddress+this.client.localPort;
		} //[cnt'd] if the server is connected.
		this.id=s;
		return s;
	}.bind(this);
	
	this.addCommand = function (command) {
		this.commands[command.name]=command;
	}.bind(this);
	
	this.removeCommand = function (command) {
		if(typeof command !== 'string') {
			command=command.name;
		}
		if(this.hasCommand(command)) {
			delete this.commands[command];
		}
	}.bind(this);
	
	this.hasCommand = function (command) {
		if(typeof command !== 'string') {
			command=command.name;
		}
		return (typeof this.commands[command] !== 'undefined');
	}.bind(this);
	
	this.execCommand = function (words, invoker, target) {
		var mod=null;
		if(words[0].indexOf('.')>=0) {
			var split=words[0].split('.');
			mod=split[0]
			words[0]=split.slice(1).join('.');
		}
		for(var cmd in this.commands) {
			if(mod !== null && this.commands[cmd].module !== mod) {
				continue;
			}
			var ret=this.commands[cmd].call(this, words, invoker, target);
			if(ret!=this.commands[cmd].NOT_HANDLED) {
				this.fire('$exec', this, words, invoker, target, this.commands[cmd]);
				return;
			}
		}
		target.privmsg('Command not handled (probably not found).');
	}.bind(this);
	
	this.cmdHelp = function (server, invoker, target, cmdname) {
		if(typeof cmdname === 'undefined') {
			var allcmds=[];
			for(var cmd in server.commands) {
				allcmds=allcmds.concat(server.commands[cmd].genNames());
			}
			target.privmsg('All commands (and aliases): '+allcmds.join(','));
		} else {
			for(var cmd in server.commands) {
				if(server.commands[cmd].genNames().indexOf(cmdname)>=0) {
					target.privmsg(server.commands[cmd].genHelp());
					return;
				}
			}
			target.privmsg('Command/alias not found.');
		}
	}
	
	this.addCommand(new Command('help', 'ow', 'help', this.cmdHelp, ['?'], 'Gets help on a command (with a parameter), or lists all commands (without a parameter).'));
	
	this.getOrCreateChannel = function (channame) {
		if(typeof this.channels[channame] === 'undefined') {
			this.channels[channame]=new Channel(this, channame);
		}
		return this.channels[channame];
	}.bind(this);
	
	this.getOrCreateUser = function (nick, ident, host, realname) {
		ident=(typeof ident === 'undefined'?null:ident);
		host=(typeof host === 'undefined'?null:host);
		realname=(typeof host === 'undefined'?null:realname);
		if(!this.hasUser(nick)) {
			var us=new User(this, nick, ident, host, realname);
			this._dataUserAdded(us);
		}
		return this.users[nick];
	}.bind(this);
	
	this.hasUser = function (user) {
		if(typeof user !== 'string') {
			user=user.nick;
		}
		return (typeof this.users[user] !== 'undefined');
	}
	
	this._dataUserRemoved = function (user) {
		if(typeof this.users[user.nick] !== 'undefined') {
			delete this.users[user.nick];
		}
		for(var chname in this.channels) { //XXX: in user.channels?
			if(this.channels[chname].hasUser(user)) {
				this.channels[chname]._dataUserParted(user);
			}
		}
	}.bind(this);
	
	this._dataUserAdded = function (user) {
		this.users[user.nick]=user;
	}.bind(this);
	
	this._dataUserNickChanged = function (user, newnick) {
		this.getOrCreateUser(newnick, user.ident, user.host, user.realname);
		if(this.hasUser(user)) {
			delete this.users[user.nick];
		}
		for(var chname in this.channels) { //XXX: in user.channels?
			if(this.channels[chname].hasUser(user)) {
				this.channels[chname]._dataUserNickChanged(user, newnick);
			}
		}
		user.nick=newnick;
	}

	this.getModules = function(delimiter)
	{
		var keys = Object.keys(this.modules);
		return keys.join(delimiter);
	}

	this.fire = function()
	{
		var activeModule = this.activeModuleStack[this.activeModuleStack.length - 1];
		var logprefix='['+this.activeModuleStack.join('->')+'] '
		if(typeof activeModule === 'undefined') {
			activeModule='';
		}
		var eventName = arguments[0];
		if(eventName.indexOf('$')>=0)
		{
			var parts=eventName.split('$');
			activeModule = parts[0];
			eventName = parts[1];
		}
		context.log('verbose', logprefix+'Event Dispatch: activeModule='+activeModule+' eventName='+eventName+' arguments='+Array.prototype.slice.call(arguments, 0));
		for(var kModule in this.modules)
		{
			if(typeof this.modules[kModule][activeModule + '$' + eventName] !== 'undefined')
			{
				this.activeModuleStack.push(kModule);
				context.log('verbose', logprefix+'Event Dispatch: Dispatching to handle: '+kModule+'.'+activeModule+'$'+eventName+'('+Array.prototype.slice.call(arguments, 1));

				try
				{
					this.modules[kModule][activeModule + '$' + eventName].apply(this.modules[kModule], Array.prototype.slice.call(arguments, 1));
				}
				catch(e)
				{
					context.logUnsafe('err', e.stack);
				}

				this.activeModuleStack.pop();
			}
			else
			{
				context.log('verbose', logprefix+'(' + kModule + ') No callback for ' + activeModule + '$' + eventName + ' defined');
			}
		}
	}

	this.fireTimed = function()
	{
		var activeModule = this.activeModuleStack[this.activeModuleStack.length - 1];
		var args = Array.prototype.slice.call(arguments, 0);
		var duration = args[0];
		var id = args[1];
		if(typeof id === 'undefined') id = 'default';

		this.fireCancel(id);

		if(typeof this.timeouts[id] === 'undefined')
		{
			this.timeouts[id] = {};
		}

		this.timeouts[id].time = new Date().getTime();
		this.timeouts[id].duration = duration;
		this.timeouts[id].fn = function()
		{
			this.activeModuleStack.push(activeModule);
			this.fire.apply(this, args.slice(2));
			this.activeModuleStack.pop();
			this.fireCancel(id);
			delete this.timeouts[id];
		}.bind(this);
		this.timeouts[id].timeout = setTimeout(this.timeouts[id].fn, duration);
	}

	this.fireChange = function(newDuration, id)
	{
		if(typeof id === 'undefined') id = 'default';
		if(typeof this.timeouts[id] !== 'undefined')
		{
			var duration = newDuration - (new Date().getTime() - this.timeouts[id].time);
			this.fireCancel(id);
			this.timeouts[id].timeout = setTimeout(this.timeouts[id].fn, duration);
		}
	}

	this.fireCancel = function(id)
	{
		if(typeof id === 'undefined') id = 'default';
		if(typeof this.timeouts[id] !== 'undefined')
		{
			clearTimeout(this.timeouts[id].timeout);
		}
	}

	this.onConnect = function()
	{
		if(this.ssl)
		{
			context.log('err', 'TLS negotiation: ' + this.client.authorized ? 'authorized' : 'unauthorized');
		}

		this.users[nick] = this.user;

		if(typeof this.pass === 'string' && this.pass !== '')
		{
			this.sendSilent('PASS ' + this.pass);
		}
		else if(typeof this.pass === 'boolean' && this.pass !== false)
		{
			if(typeof this.rl !== 'undefined') this.rl.close();

			this.rl = readline.createInterface(
			{
				input: process.stdin,
				output: process.stdout
			});

			context.log('out', 'Enter PASS for ' + host + ':' + port + ' ' + this.nick + '!' + this.ident + ': ');
			this.rl.question('', function(pass)
			{
				context.logUnsafe('out', '\x1b[1A\x1b[2K');

				this.pass = pass;
				this.onConnect();

				this.rl.close();
			}.bind(this));

			return;
		}

		this.send('NICK ' + this.nick);
		this.send('USER ' + this.ident + ' 0 * :' + this.user.realname);

		this.ponged = true;
		this.pingInterval = setInterval(function()
		{
			if(this.ponged)
			{
				this.ponged = false;
				this.send('PING :keepalive');
			}
			else
			{
				this.client.end();
				this.client.destroy();
			}
		}.bind(this), 120000);
	}.bind(this);

	this.accumulator = '';

	this.onData = function(data)
	{
		var text = this.accumulator + data.toString();
		var texts = text.split('\r\n');

		for(var i=0; i<(texts.length-1); ++i)
		{
			this.recv(texts[i]);
		}

		this.accumulator = texts[texts.length - 1];
	}.bind(this);

	this.onClose = function()
	{
		context.log('err', 'Connection closed');

		clearInterval(this.pingInterval);

		this.client.end();
		this.client.destroy();

		delete this.users;
		delete this.channels;
		delete this.user.channels;

		this.users = {};
		this.channels = {};
		this.user.channels = {};

		var timeout = setTimeout(function()
		{
			this.connect();
		}.bind(this), 5000);
	}.bind(this);

	this.onError = function(err)
	{
		context.log('urgent', err);
	}.bind(this);

	this.connect = function()
	{
		if(this.ssl)
		{
			context.log('err', 'Negotiating connection over TLS');
			this.client = tls.connect(port, host, {rejectUnauthorized:false}, this.onConnect);
		}
		else
		{
			this.client = new net.Socket();
			this.client.setNoDelay();

			this.client.connect(port, host, this.onConnect);
		}

		this.client.setEncoding('utf8');

		this.client.on('data', this.onData);
		this.client.on('close', this.onClose);
		this.client.on('error', this.onError);
	}.bind(this);

	this.recv = function(data)
	{
		context.log('err', 'R> ' + data);
		var words = data.split(' ');

		var prefix = null;
		var opcode = '';
		var params = [];
		var paramsIndex = 0;

		if(words[0][0] === ':')
		{
			prefix = {};
			prefix['mask'] = words[0].substr(1);

			if(prefix['mask'].indexOf('!') !== -1)
			{
				var split1 = prefix['mask'].split('!');
				var split2 = split1[1].split('@');

				prefix['nick'] = split1[0];
				prefix['ident'] = split2[0];
				prefix['host'] = split2[1];
			}
			
			prefix.toString = function () {
				return '<Prefix '+this.mask+'>';
			}.bind(prefix);

			opcode = words[1];

			if(words.length > 2)
			{
				paramsIndex = 2;
			}
		}
		else
		{
			opcode = words[0];

			if(words.length > 1)
			{
				paramsIndex = 1;
			}
		}

		if(paramsIndex > 0)
		{
			var inString = false;
			for(var i=paramsIndex; i<words.length; ++i)
			{
				if(!inString && words[i][0] === ':')
				{
					inString = true;
					params.push(words[i].substr(1));
					continue;
				}

				if(inString)
				{
					params[params.length - 1] += ' ' + words[i];
				}
				else
				{
					params.push(words[i]);
				}
			}
		}

		this.fire('$recv', this, prefix, opcode, params);
	}.bind(this);

	this.send = function(data)
	{
		context.log('err', 'S> ' + data);
		this.sendSilent(data);
	}.bind(this);

	this.sendSilent = function(data)
	{
		this.client.write(data + '\r\n');
	}.bind(this);
}
